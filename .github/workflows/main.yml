name: Unity Build with Submodules

on:
  repository_dispatch:
    types: [start-build]
  push:
    branches:
      - main

# if push
#${{ github.event.head_commit.message }}
# if repo dispatch

jobs:
  build:
    runs-on: self-hosted

    steps:

      - name: Get Short Hash
        shell: bash
        run: |
          echo "sha_short=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV"
          echo "timestamp=$(date +"%Y.%m.%d.%H.%M.%S")" >> "$GITHUB_ENV"
   
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - if: ${{ github.event.head_commit.message != '' }}
        name: Electron Updated, Set Changelog
        run: echo "changemsg=$(echo "${{ github.event.head_commit.message }}")" >> "$GITHUB_ENV"
      - if: ${{ github.event.head_commit.message == '' }}
        name: Unity Updated
        run: echo "changemsg=New_Unity_Build" >> "$GITHUB_ENV"
        
      - name: Configure git for submodules
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git config --global url."https://${{ secrets.REPO_PAK }}@github.com/".insteadOf "https://github.com/"

      - name: Initialize and update submodules
        run: |
          git submodule deinit -f --all
          git clean -fdx
          git submodule init
          git submodule update --recursive
          
      - name: Fetch Artifact
        uses: dawidd6/action-download-artifact@v11
        with:
          repo: VRS-NDA/VRS-Unity
          name: WebGLBuild
          workflow: main.yml
          #workflow_search: false
          #workflow_conclusion: success
          check_artifacts: true
          branch: decode
          path: ./webgl
          github_token: ${{ secrets.ARTIFACT_DOWNLOADER_TOKEN }}
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAK }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{env.timestamp}}
          release_name: Release ${{ env.timestamp }}
          body: |
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
      - name: Zip release payload (single archive)
        run: |
          zip -r release.zip . -x ".*" -x "*/.*"
      - name: Upload Release Asset (single zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAK }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: ${{ steps.tag.outputs.tag_name }}web.zip
          asset_content_type: application/zip

